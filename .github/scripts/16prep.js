module.exports = async function ({ github, context, core, env }) {
    const [owner, repo] = process.env.FORK_REPO.split('/');
    const trackingIssueUrl = context.payload.issue.html_url;

    const body16 = [
        '',
        '### Task: Time Travel in Git - View and Restore History',
        '',
        '**Why this matters:**',
        'Mistakes happen! Sometimes you need to see what your project looked like yesterday, last week, or three commits ago. Git\'s power lies in its ability to preserve complete history and let you navigate through time. Understanding how to view and restore previous versions is crucial for recovering from errors and understanding your project\'s evolution.',
        '',
        '**Learning Goals:**',
        '- 🟢 Easy: Navigate history using GitHub\'s web interface',
        '- 🟡 Medium: Use command-line tools to view, checkout, revert, and reset',
        '',
        '### 🟢 Easy Version: Time Travel on GitHub\'s Web Interface',
        '',
        '**Step 1: View commit history**',
        '1. Go to your fork repository on GitHub',
        '2. Click on the file `preregistration.md` (or any file you\'ve edited)',
        '3. Click **"History"** button (clock icon) in the top right',
        '4. You\'ll see a list of all commits that changed this file',
        '5. Click on any commit to see what changed in that specific commit',
        '',
        '**Step 2: View a file at a specific point in time**',
        '1. From the commit history, click **"View file at this point in history"**',
        '2. Notice the file content shows exactly how it looked in that commit',
        '3. The URL contains the commit hash (e.g., `blob/a1b2c3d4/preregistration.md`)',
        '4. You can browse the entire repository at that moment in time!',
        '',
        '**Step 3: Compare changes between commits**',
        '1. Go to your repository main page',
        '2. Click **"Commits"** (or `<>/Commits` in the code tab)',
        '3. Click on any commit title to see the full diff',
        '4. Green lines (+) show additions, red lines (-) show deletions',
        '5. Try clicking **"Split"** vs **"Unified"** view to see different layouts',
        '',
        '**Step 4: Use Blame view to see who wrote each line**',
        '1. Navigate to any file in your repository (e.g., `preregistration.md`)',
        '2. Click the **"Blame"** button in the top right (next to History)',
        '3. You\'ll see each line annotated with:',
        '   - Who last modified that line',
        '   - When it was modified',
        '   - Which commit made the change',
        '4. Click on any commit hash to see the full context of that change',
        '5. Hover over the commit message to see more details',
        '',
        '**Why "Blame" is useful:**',
        '- Find out who to ask about a specific piece of code/text',
        '- Understand the context and reasoning behind a change',
        '- Track down when a bug or typo was introduced',
        '- See the evolution of a document line-by-line',
        '',
        '**Step 5: Restore a previous version (via GitHub UI)**',
        '1. Navigate to the commit with the version you want to restore',
        '2. Click **"View file at this point in history"**',
        '3. Click the **"Edit"** button (pencil icon)',
        '4. Copy the entire content',
        '5. Navigate back to the current version of the file',
        '6. Click **"Edit"**, paste the old content, and commit with a message like: `Restore version from commit abc123`',
        '',
        '**Expected results (Easy):**',
        '- ✓ Viewed commit history for a file',
        '- ✓ Saw what a file looked like in the past',
        '- ✓ Compared changes between commits',
        '- ✓ Used Blame view to see line-by-line authorship',
        '- ✓ (Optional) Restored an old version of a file',
        '',
        '---',
        '',
        '### 🟡 Medium Version: Time Travel Using Command Line in Codespaces',
        '',
        '**Prerequisites:** Complete Milestone 12 (GitHub Codespaces) first!',
        '',
        '**Step 1: Set up your Codespace**',
        '1. Go to your fork repository',
        '2. Press `.` (dot) or go to Code → Codespaces → Create codespace',
        '3. Open a terminal: `Terminal` → `New Terminal`',
        '',
        '**Step 2: Explore history with `git log`**',
        '```bash',
        '# View commit history',
        'git log --oneline',
        '',
        '# View detailed history with changes',
        'git log -p --max-count=3',
        '',
        '# Visual graph of branches',
        'git log --oneline --graph --all',
        '',
        '# Search for specific changes',
        'git log --grep="preregistration"',
        '',
        '# See who changed a specific file',
        'git log --follow preregistration.md',
        '```',
        '',
        '**Step 3: View old versions with `git checkout`**',
        '```bash',
        '# View list of commits and copy a commit hash',
        'git log --oneline',
        '',
        '# Checkout a specific commit (replace abc123 with actual hash)',
        'git checkout abc123',
        '',
        '# You\'re now in "detached HEAD" state - you can look around!',
        '# View the file as it was:',
        'cat preregistration.md',
        '',
        '# Return to the present',
        'git checkout main',
        '```',
        '',
        '**⚠️ Important:** When in detached HEAD state, you\'re just looking around. Don\'t make commits unless you create a new branch!',
        '',
        '**Step 4: Undo commits with `git revert`** (SAFE)',
        '```bash',
        '# Revert creates a NEW commit that undoes changes',
        '# This is safe because it doesn\'t rewrite history',
        '',
        '# See recent commits',
        'git log --oneline -5',
        '',
        '# Revert the most recent commit',
        'git revert HEAD',
        '',
        '# OR revert a specific commit',
        'git revert abc123',
        '',
        '# This opens an editor for commit message - save and exit',
        '# Your changes are now undone, but history shows both commits!',
        '```',
        '',
        '**Step 5: Reset history with `git reset`** (DESTRUCTIVE - use carefully!)',
        '',
        '⚠️ **Warning:** `git reset` rewrites history. Only use on commits you haven\'t pushed!',
        '',
        '```bash',
        '# Three types of reset:',
        '',
        '# 1. Soft reset - keep changes staged',
        'git reset --soft HEAD~1',
        '# Undoes last commit, but keeps changes ready to commit again',
        '',
        '# 2. Mixed reset (default) - keep changes unstaged',
        'git reset HEAD~1',
        '# Undoes last commit, changes become unstaged',
        '',
        '# 3. Hard reset - DELETE ALL CHANGES',
        'git reset --hard HEAD~1',
        '# ⚠️ DANGER: This deletes the commit AND all changes!',
        '```',
        '',
        '**Understanding the notation:**',
        '- `HEAD` = current commit',
        '- `HEAD~1` = one commit before current',
        '- `HEAD~3` = three commits before current',
        '- `abc123` = specific commit hash',
        '',
        '**Step 6: Practice safe time travel**',
        '1. Make a test branch: `git checkout -b time-travel-test`',
        '2. Create a test file: `echo "test" > test.txt && git add test.txt && git commit -m "Test commit"`',
        '3. Try different reset commands to see what happens',
        '4. Delete the test branch when done: `git checkout main && git branch -D time-travel-test`',
        '',
        '**When to use each command:**',
        '',
        '| Command | Use Case | Safe? |',
        '|---------|----------|-------|',
        '| `git checkout <commit>` | View history, explore old versions | ✅ Yes (read-only) |',
        '| `git revert <commit>` | Undo a commit publicly, keep history | ✅ Yes (creates new commit) |',
        '| `git reset --soft` | Redo last commit message/changes | ⚠️ Only if not pushed |',
        '| `git reset --mixed` | Unstage changes from last commit | ⚠️ Only if not pushed |',
        '| `git reset --hard` | Delete commits and all changes | ❌ DANGEROUS! |',
        '',
        '**Expected results (Medium):**',
        '- ✓ Used `git log` to explore history',
        '- ✓ Checked out an old commit',
        '- ✓ Reverted a commit safely',
        '- ✓ Understood the difference between revert and reset',
        '- ✓ Practiced on a test branch',
        '',
        '---',
        '',
        '**Discussion Questions:**',
        '- When would you use `git revert` vs `git reset`?',
        '- Why is it dangerous to use `git reset --hard` on pushed commits?',
        '- How might viewing old versions help debug a problem in your research project?',
        '',
        '**Pro tips:**',
        '- 💡 Use `git reflog` to see ALL your Git actions - even "deleted" commits!',
        '- 💡 Before doing destructive operations, create a backup branch: `git branch backup`',
        '- 💡 The rule of thumb: if you\'ve pushed it, use `revert`. If it\'s local only, `reset` is okay.',
        '',
        `**When done:** Comment \`/done 16\` [in the tracking issue](${trackingIssueUrl}) and let us know which version you completed!`,
        '',
    ];

    await github.rest.issues.create({
        owner: owner,
        repo: repo,
        title: '[optional] Milestone 16: Time Travel in Git - View and Restore History - 🟢 Easy / 🟡 Medium',
        body: body16.join('\n'),
        labels: ['enhancement']
    });
}
