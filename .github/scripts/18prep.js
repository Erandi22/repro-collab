module.exports = async function ({ github, context, core, env }) {
    const [owner, repo] = process.env.FORK_REPO.split('/');
    const trackingIssueUrl = context.payload.issue.html_url;

    const body18 = [
        '',
        '### Task: Cherry-Pick Commits for Selective PR (üî¥ Hard)',
        '',
        '**Why this matters:**',
        'In collaborative research projects, you often want to contribute specific changes (like your data files) without including unrelated work in progress. Cherry-picking allows you to select specific commits from your history and create a clean PR containing only those commits. This is essential for contributing to shared projects where you want precise control over what you submit.',
        '',
        '**Real-world scenario:**',
        'Imagine you\'ve been working on the preregistration document and collecting data simultaneously. Your fork has commits for both activities mixed together. You want to submit your data to the upstream repository, but the preregistration isn\'t ready yet. Cherry-picking lets you create a PR with *only* your data commits.',
        '',
        '**Learning Goals:**',
        '- Understand what git cherry-pick does',
        '- Create a selective PR using cherry-picked commits',
        '- Contribute specific changes without including work in progress',
        '',
        '### Detailed Steps:',
        '',
        '**Step 1: Understand your commit history**',
        '',
        '1. Look at your recent commits on GitHub:',
        '   - Go to your fork',
        '   - Click on "Commits"',
        '   - Identify which commits added CSV files to `data/`',
        '',
        '2. Note down the commit hashes (first 7 characters) of data-related commits',
        '   - Example: `a1b2c3d Added my participant data`',
        '',
        '**Step 2: Create a clean branch for the PR**',
        '',
        'We\'ll create a branch based on upstream\'s main, then cherry-pick only the data commits.',
        '',
        '**Option A: Using GitHub Web Interface (Limited)**',
        '',
        'Unfortunately, GitHub\'s web interface doesn\'t support cherry-picking. You\'ll need to use Option B (Codespaces).',
        '',
        '**Option B: Using Codespaces (Recommended)**',
        '',
        '1. Open a Codespace for your fork (press `.` or use Code ‚Üí Codespaces)',
        '2. Open terminal: `Terminal` ‚Üí `New Terminal`',
        '',
        '```bash',
        '# Add upstream as a remote (if not already added)',
        `git remote add upstream https://github.com/${context.repo.owner}/${context.repo.repo}.git`,
        '',
        '# Fetch latest from upstream',
        'git fetch upstream',
        '',
        '# Create a new branch based on upstream/main',
        'git checkout -b data-contribution upstream/main',
        '',
        '# Now you\'re on a clean branch that matches upstream',
        '```',
        '',
        '**Step 3: Cherry-pick your data commits**',
        '',
        '```bash',
        '# List your commits to find the ones you want',
        'git log --oneline origin/main --not upstream/main',
        '',
        '# This shows commits in YOUR fork that aren\'t in upstream',
        '# Look for commits that added CSV files',
        '',
        '# Cherry-pick each data commit (replace with actual hashes)',
        'git cherry-pick a1b2c3d',
        'git cherry-pick b2c3d4e',
        'git cherry-pick c3d4e5f',
        '',
        '# Alternative: cherry-pick multiple commits at once',
        'git cherry-pick a1b2c3d b2c3d4e c3d4e5f',
        '```',
        '',
        '**If you get a conflict during cherry-pick:**',
        '```bash',
        '# See what\'s conflicting',
        'git status',
        '',
        '# Fix the conflicts in the files',
        '# Then:',
        'git add <conflicted-file>',
        'git cherry-pick --continue',
        '',
        '# Or abort if needed:',
        'git cherry-pick --abort',
        '```',
        '',
        '**Step 4: Verify you have only data files**',
        '',
        '```bash',
        '# See what changed compared to upstream/main',
        'git diff upstream/main --name-only',
        '',
        '# Should only show files in data/ folder',
        '# Example output:',
        '# data/participant_01.csv',
        '# data/participant_02.csv',
        '',
        '# Double-check the changes',
        'git log upstream/main..HEAD --oneline',
        '```',
        '',
        '**Step 5: Push and create PR to upstream**',
        '',
        '```bash',
        '# Push your cherry-picked branch to YOUR fork',
        'git push origin data-contribution',
        '```',
        '',
        'Now on GitHub:',
        '1. Go to **upstream** repository (not your fork!)',
        `   - https://github.com/${context.repo.owner}/${context.repo.repo}`,
        '2. You should see a banner: "data-contribution had recent pushes"',
        '3. Click **"Compare & pull request"**',
        '4. Make sure:',
        '   - Base repository: `upstream/main`',
        '   - Head repository: `your-username:data-contribution`',
        '5. Title: `Add participant data`',
        '6. Description:',
        '```markdown',
        '## Data Contribution',
        '',
        'This PR adds participant data files to the shared data folder.',
        '',
        '**Contents:**',
        '- Added X participant CSV files to `data/`',
        '',
        '**Note:** This PR was created using git cherry-pick to include only data commits, excluding work-in-progress changes.',
        '```',
        '7. Click **"Create pull request"**',
        '',
        '**Step 6: Verify the PR contains only CSV files**',
        '',
        '1. Click on the **"Files changed"** tab',
        '2. Verify that:',
        '   - ‚úÖ All files are in `data/` folder',
        '   - ‚úÖ All files are `.csv` files',
        '   - ‚úÖ All files show as "added" (green +)',
        '   - ‚ùå No other files are modified',
        '',
        '**Expected results:**',
        '- ‚úì Created a clean branch based on upstream/main',
        '- ‚úì Cherry-picked specific commits',
        '- ‚úì Created PR to upstream with only CSV files in data/',
        '- ‚úì PR shows clean, focused changes',
        '',
        '---',
        '',
        '**Understanding Cherry-Pick:**',
        '',
        'Think of cherry-pick as "copy this commit to my current branch":',
        '```',
        'Your fork (main):         A --- B --- C --- D --- E',
        '                                |data  |doc  |data |doc',
        '',
        'Upstream (main):          A',
        '',
        'After cherry-pick:        A --- C\' --- E\'',
        '(data-contribution)             |data   |data',
        '```',
        '',
        'The apostrophes (C\', E\') indicate these are *new* commits with the same changes but different hashes.',
        '',
        '**Discussion Questions:**',
        '- When would cherry-picking be useful in research collaboration?',
        '- What are the risks of cherry-picking? (Hint: duplicate commits)',
        '- How is this different from creating a branch before making commits?',
        '',
        '**Pro tips:**',
        '- üí° Cherry-pick works best for small, independent commits',
        '- üí° Use `git cherry-pick -x` to record the original commit hash in the message',
        '- üí° If you cherry-pick often, consider organizing your work in separate branches from the start',
        '- üí° After your PR is merged, you might want to rebase your main branch to avoid duplicate commits',
        '',
        '**Common mistakes:**',
        '- ‚ùå Cherry-picking commits that depend on other commits (causes conflicts)',
        '- ‚ùå Forgetting to base your branch on upstream/main (includes extra commits)',
        '- ‚ùå Cherry-picking into main instead of a new branch',
        '',
        `**When done:** Comment \`/done 18\` [in the tracking issue](${trackingIssueUrl}).`,
        '',
        '**Note:** Our automated check will verify:',
        '1. You have an open PR from your fork to upstream',
        '2. The PR only adds CSV files to the `data/` folder',
        '3. No other files are modified',
        '',
    ];

    await github.rest.issues.create({
        owner: owner,
        repo: repo,
        title: '[optional] Milestone 18: Cherry-Pick Commits for Selective PR - üî¥ Hard',
        body: body18.join('\n'),
        labels: ['enhancement']
    });
}
