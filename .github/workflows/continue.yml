# .github/workflows/continue.yml
name: Milestone Router

concurrency:
  group: "milestones-${{ github.event.issue.number  }}"
  cancel-in-progress: false

on:
  issue_comment:
    types: [created, edited]

jobs:
  route:
    if: ${{ startsWith(github.event.comment.body, '/done ') && contains(github.event.issue.labels.*.name, 'newfork') }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract FORK from issue body
        id: vars
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          FORK_REPO="$(echo "$ISSUE_BODY" \
            | grep -oP 'Fork repo: `\K[^`]+')"
          echo "Extracted fork repo: $FORK_REPO"
          echo "fork_repo=$FORK_REPO" >> "$GITHUB_OUTPUT"
      - uses: actions/checkout@v5
        with:
          sparse-checkout: |
            .github/scripts
          sparse-checkout-cone-mode: false
      - name: Parse slash-command
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          result-encoding: string
          script: |
            const run = require('./.github/scripts/parse.js');
            return await run({ github, context, core, env: process.env });
      - name: 3
        if: steps.parse.outputs.result == '3'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
                const run = require('./.github/scripts/3.js');
                return await run({ github, context, core, env: process.env });
      - name: 4
        if: steps.parse.outputs.result == '4'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const run = require('./.github/scripts/4.js');
            return await run({ github, context, core, env: process.env });
      - name: 5
        id: verify-5
        if: steps.parse.outputs.result == '5'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [forkOwner, forkRepo] = process.env.FORK_REPO.split('/');
            const targetprereg = 'preregistration needed';

            // 1) First verify the "Create your own first issue" is closed
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: forkOwner, repo: forkRepo, state: 'all', per_page: 100
            });
            const intro = issues.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );

            // 2) Try exact match
            let foundprereg = issues.find(i => i.title.toLowerCase() === targetprereg);

            // 3) If no exact, run Levenshtein â‰¤3
            if (!foundprereg) {
              const lev = (a, b) => {
                const dp = Array.from({ length: a.length + 1 }, () => []);
                for (let i = 0; i <= a.length; i++) dp[i][0] = i;
                for (let j = 0; j <= b.length; j++) dp[0][j] = j;
                for (let i = 1; i <= a.length; i++) {
                  for (let j = 1; j <= b.length; j++) {
                    dp[i][j] = a[i-1] === b[j-1]
                      ? dp[i-1][j-1]
                      : 1 + Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]);
                  }
                }
                return dp[a.length][b.length];
              };
              // Fixed: using 'issues' and 'targetprereg' instead of 'recent' and 'target'
              foundprereg = issues.find(i => lev(i.title.toLowerCase(), targetprereg) <= 3);
            }

            if (!intro || intro.state !== 'closed') {
              const url = intro
                ? intro.html_url
                : `https://github.com/${forkOwner}/${forkRepo}/issues`;
              if (foundprereg && foundprereg.state !== 'open') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `ðŸš« Milestone 5 not complete. You have instead closed "preregistration needed" but this task is not done yet, please reopen it and close ["Create your own first issue"](${url}) in your fork, then run \`/done 5\` again.`
                });
                return; // Exit early
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `ðŸš« Milestone 5 not complete. Please close ["Create your own first issue"](${url}) in your fork, then run \`/done 5\` again.`
                });
                return; // Exit early
              }
            }

            // 2) Extract the fork SHA from the issue body
            const issueBody = context.payload.issue.body;
            const shaMatch = issueBody.match(/Fork sha:\s*`([a-f0-9]{40})`/);
            if (!shaMatch) {
              throw new Error('Could not find fork SHA in issue body');
            }
            const forkSha = shaMatch[1];

            // 3) Store branch name for next step
            const timestamp = Date.now();
            const branchName = `preregistration/pr-${context.actor}-${timestamp}`;
            core.setOutput('branch_name', branchName);
            core.setOutput('fork_sha', forkSha);
            core.setOutput('fork_owner', forkOwner);
            core.setOutput('fork_repo', forkRepo);

      - name: Create branch and commit with upstream permissions
        id: create-branch
        if: steps.parse.outputs.result == '5' && steps.verify-5.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_UPSTREAM }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkSha = '${{ steps.verify-5.outputs.fork_sha }}';
            const { data: mainRef } = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'heads/main'
                  });
            const mainSha = mainRef.object.sha;

            // Create branch in upstream from fork SHA
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: mainSha
            });
            const { data: preregistration_file } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'prereg_draft.md'
            });
            const preregistrationContent = Buffer.from(preregistration_file.content, 'base64').toString();
            
            // Get current file SHA if it exists
            let fileSha = null;
            try {
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'preregistration.md',
                ref: branchName
              });
              fileSha = file.sha;
            } catch (e) {
              // File doesn't exist, which is fine
            }
            
            // Overwrite the file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'preregistration.md',
              message: `Update preregistration for ${context.actor}`,
              content: Buffer.from(preregistrationContent).toString('base64'),
              branch: branchName,
              sha: fileSha
            });
              core.setOutput('branch_name', branchName);

      - name: Create PR and update issue
        if: steps.parse.outputs.result == '5' && steps.create-branch.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkOwner = '${{ steps.verify-5.outputs.fork_owner }}';
            const forkRepo = '${{ steps.verify-5.outputs.fork_repo }}';

            // Find the user's created issue with Levenshtein logic
            const target = 'preregistration needed';

            // 1) Grab the last 10 issues (all states)
            const { data: recent } = await github.rest.issues.listForRepo({
              owner: forkOwner,
              repo: forkRepo,
              state: 'all',
              per_page: 10,
              sort: 'created',
              direction: 'desc'
            });

            // 2) Try exact match
            let preregIssue = recent.find(i => i.title.toLowerCase() === target);

            // 3) If no exact, run Levenshtein â‰¤3
            if (!preregIssue) {
              const lev = (a, b) => {
                const dp = Array.from({ length: a.length + 1 }, () => []);
                for (let i = 0; i <= a.length; i++) dp[i][0] = i;
                for (let j = 0; j <= b.length; j++) dp[0][j] = j;
                for (let i = 1; i <= a.length; i++) {
                  for (let j = 1; j <= b.length; j++) {
                    dp[i][j] = a[i-1] === b[j-1]
                      ? dp[i-1][j-1]
                      : 1 + Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]);
                  }
                }
                return dp[a.length][b.length];
              };
              preregIssue = recent.find(i => lev(i.title.toLowerCase(), target) <= 3);
            }

            // Get fork's default branch
            const { data: forkData } = await github.rest.repos.get({
              owner: forkOwner,
              repo: forkRepo
            });
            const forkDefaultBranch = forkData.default_branch;

            const prBodyLines = [
              '### Congratulations on completing milestone 5!',
              '',
              'Next, we\'ll have a look at the draft of the preregistration that your (imaginary) collaborators have prepared.',
              'But before doing so, let\'s learn how this situation came about.',
              '',
              'To do so, we need to introduce **branches**. Branches allow collaborators to work independently yet simultaneously on the same project.',
              'How? Each branch is a parallel version of the project where changes can be made without affecting the official version of the project.',
              'The **main branch** usually represents the official version of the project, i.e., the one that reflects the current consensus.',
              'For example, each collaborator might use their own branch to draft sections of a paper, experiment with changes, or revise text without disrupting others\' work.',
              '',
              'Once work in a branch is ready, your collaborators (or you) can create a **pull request (PR)**, which is the main tool for requesting feedback on GitHub.',
              'A pull request shows the changes made in a branch line-by-line and invites collaborators to review, discuss, and suggest improvements.',
              'When the changes are deemed good, they can be added to the official version.',
              'This step is called **merging**: it combines the separate branch with the main branch so that both contain the same version of the project.',
              '',
              'You\'re now inside such a pull request: Your collaborators are waiting for your feedback on their preregistration draft.',
              `This PR closes #${preregIssue.number} (${preregIssue.title}).`,
              '',
              '**Task:** Suggest a change to the preregistration file',
              '1. Go to the **Files changed** tab of this PR.',
              '2. Find the typo in line 12 ("empierically").',
              '3. Click the **"+"** button next to the line.',
              '4. Click the **"Add a Suggestion"** button next to the line. Look for this symbol:',
              '<picture>',
              '  <source srcset="https://raw.githubusercontent.com/aaronpeikert/repro-collab/main/assets/addASuggestionSymbol.png" media="(prefers-color-scheme: dark)">',
              '  <img src="https://raw.githubusercontent.com/aaronpeikert/repro-collab/main/assets/addASuggestionSymbol_white.png" alt="add Suggestion symbol">',
              '</picture>',
              '',
              '5. Click the **"Start a review"** (not "Comment").',
              '6. Click on -> Start a Review -> Submit review -> Submit review.',
              '',
              '**Note**: If you are not completely sure how to do it, please refer to the GIF at the end of this comment.',
              '',
              `**Afterwards:** Once you've suggested your change, return to ${context.payload.issue.html_url} and comment /done 6 to continue`,
              '',
              '<img src="https://raw.githubusercontent.com/aaronpeikert/repro-collab/main/assets/make_suggestion.gif" alt="Make Suggestion GIF">'
            ];


            // Create PR from upstream branch to fork
            const { data: pr } = await github.rest.pulls.create({
              owner: forkOwner,
              repo: forkRepo,
              title: 'Review this preregistration update',
              head: `${context.repo.owner}:${branchName}`,
              base: forkDefaultBranch,
              body: prBodyLines.join('\n'),
              maintainer_can_modify: true
            });
              
            // Update the upstream issue checklist
            const updatedBody5 = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*5\..*)$/m, '$1x]$2')
                + '\n- [ ] 6. Add a suggestion to the PR - ðŸŸ¡ Medium';

                //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 6. Review and merge a PR\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/review_pr.gif" alt="Review PR GIF">`);
              
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody5,
              state: 'open'
            });

            // Comment on the upstream issue
            const milestone5BodyLines = [
              'ðŸŽ‰ Milestone 5 complete - "Close an issue"!',
              '',
              `**Task:** Milestone 6 - ðŸŸ¡ Medium is now available. Review the pull request (PR) I created in your fork: ${pr.html_url}`,
              '',
              'Add a suggestion to improve the code using GitHub\'s suggestion feature, more detail in our PR.',
              '',
              `**Afterwards:** Comment \`/done 6\` here.`,
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone5BodyLines.join('\n')
            });
      - name: 6
        if: steps.parse.outputs.result == '6'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const run = require('./.github/scripts/6.js');
            return await run({ github, context, core, env: process.env });
      - name: 7
        if: steps.parse.outputs.result == '7'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const run = require('./.github/scripts/7.js');
            return await run({ github, context, core, env: process.env });

      # Milestone 8: Build groups
      - name: 8
        if: steps.parse.outputs.result == '8'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const run = require('./.github/scripts/8.js');
            return await run({ github, context, core, env: process.env });

      # Milestone 9: Generate and upload data + Auto-trigger Milestone 10
      - name: 9
        if: steps.parse.outputs.result == '9'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const run = require('./.github/scripts/9.js');
            return await run({ github, context, core, env: process.env });

      # Failure notification step - only triggers if milestone verification steps fail
      - name: Notify on failure
        if: failure() && steps.parse.outputs.result != '-1' && steps.parse.outputs.result != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const run = require('./.github/scripts/fail.js');
            return await run({ github, context, core, env: process.env });
